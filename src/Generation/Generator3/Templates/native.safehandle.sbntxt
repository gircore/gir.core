using System;
using System.Runtime.InteropServices;

#nullable enable

{{~ $safehandle_name = get_metadata "SafeHandleName" ~}}
{{~ $struct_name = get_metadata "StructRefName" ~}}

namespace {{ namespace.native_name }}
{
    // AUTOGENERATED FILE - DO NOT MODIFY
    
    public partial class {{ get_metadata "Name" }}
    {    
        public class {{$safehandle_name}} : SafeHandle
        {
            public static {{$safehandle_name}} Null = new {{$safehandle_name}}();
    
            protected {{$safehandle_name}}() : base(IntPtr.Zero, true) {}
            public {{$safehandle_name}}(IntPtr handle) : base(IntPtr.Zero, true)
            {
                SetHandle(handle);
            }
    
            public sealed override bool IsInvalid => handle == IntPtr.Zero;
    
            protected override bool ReleaseHandle()
            {
                {{write_release_memory_call}}
                return true;
            }
        }
        
        {{~ if (constructors | array.size) == 0 ~}}
        
        public class Managed{{$safehandle_name}} : {{$safehandle_name}}
        {
            public static {{$safehandle_name}} Create({{$struct_name}}? data = null)
            {
                var size = Marshal.SizeOf<{{$struct_name}}>();
                IntPtr ptr = Marshal.AllocHGlobal(size);
                
                if (data.HasValue)
                {
                    Marshal.StructureToPtr(data.Value, ptr, false);
                }
                else
                {
                    var str = new {{$struct_name}}();
                    Marshal.StructureToPtr(str, ptr, false);
                }
                
                return new Managed{{$safehandle_name}}(ptr);
            }
            
            private Managed{{$safehandle_name}}(IntPtr handle) : base(handle) { }
    
            protected override bool ReleaseHandle()
            {
                Marshal.FreeHGlobal(handle);
                return true;
            }
        }
        {{~ end ~}}
    }
}