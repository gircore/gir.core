using Generator.Model;

namespace Generator.Renderer.Internal;

internal static class CallbackAsyncHandler
{
    public static string Render(GirModel.Callback callback)
    {
        var handlerName = Model.Callback.GetAsyncHandlerName(callback);
        var callbackName = Model.Callback.GetName(callback);

        return $@"
/// <summary>
/// Async Handler for {callback.Name}. An async annotation indicates the closure will
/// be called precisely once, after which it is then available for garbage collection.
/// </summary>
{PlatformSupportAttribute.Render(callback as GirModel.PlatformDependent)}
public class {handlerName}
{{
    private {Namespace.GetPublicName(callback.Namespace)}.{callbackName} managedCallback;
    private GCHandle gch;

    public {Namespace.GetInternalName(callback.Namespace)}.{callbackName} NativeCallback;

    public {handlerName}({Namespace.GetPublicName(callback.Namespace)}.{callbackName} managed)
    {{
        managedCallback = managed;
        gch = GCHandle.Alloc(this);
        {CallbackCommonHandlerRenderUtils.RenderNativeCallback(callback, GirModel.Scope.Async)}
    }}
}}";
    }

    public static string RenderFile(GirModel.Callback callback)
    {
        try
        {
            return $@"
using System;
using System.Linq;
using System.Runtime.InteropServices;
using System.Runtime.Versioning;

#nullable enable

namespace {Namespace.GetInternalName(callback.Namespace)};

// AUTOGENERATED FILE - DO NOT MODIFY

{Render(callback)}";
        }
        catch (System.Exception ex)
        {
            Log.Warning($"Can not generate callback async handler for {callback.Name}: {ex.Message}");
            return string.Empty;
        }
    }
}
